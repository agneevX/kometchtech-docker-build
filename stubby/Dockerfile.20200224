# syntax = docker/dockerfile:experimental

FROM arm64v8/alpine:latest AS getdns-build

#ARG GETDNS_VERSION="1.5.2"
ARG GETDNS_VERSION="1.6.0-rc.1"
ARG BUILD_BASE="build-base binutils clang llvm lld make gawk autoconf automake libtool curl cmake "
ARG BUILD_PKGS="${BUILD_BASE} git yaml-dev linux-headers libuv-dev libev-dev check-dev \
                unbound-dev libevent-dev libidn2-dev nettle-dev openssl-dev "
ARG CFLAGS="-O2 -pthread -pipe -fPIC -fPIE -fomit-frame-pointer -D_FORTIFY_SOURCE=2 "
ARG CXXFLAGS="${CFLAGS}"
ARG LDFLAGS="-Wl,-O2 -Wl,--as-needed -Wl,-z,relro -Wl,-z,now "
ENV CC="clang"
ENV CXX="clang++"
ENV AR="llvm-ar"
ENV NM="llvm-nm"
ENV RANLIB="llvm-ranlib"
ENV LD="ld.lld"
ENV STRIP="llvm-strip"

# build dependencies install
RUN --mount=type=cache,target=/var/cache/apk \
    apk add --update ${BUILD_PKGS}
RUN mkdir -p /usr/src /tmp/root/var/stubby/ /tmp/root/etc/stubby/ /tmp/root/usr/local/lib/ /tmp/root/usr/local/include
# app build
RUN git clone -b v${GETDNS_VERSION} --depth 1 https://github.com/getdnsapi/getdns.git /usr/src
RUN cd /usr/src \
    && git submodule update --init \
    && mkdir build \
    && cd build \
    && cmake \
       -DENABLE_STATIC=OFF \
       -DBUILD_STUBBY=ON \
       -DSTUB_NATIVE_DNSSEC=ON \
       -DEDNS_COOKIES=ON \
       -DBUILD_LIBEV=ON \
       -DBUILD_LIBEVENT2=ON \
       -DBUILD_LIBUV=ON \
       -DUSE_LIBIDN2=ON \
       -DCMAKE_C_FLAGS=${CFLAGS} \
       -DCMAKE_MODULE_LINKER_FLAGS=${LDFLAGS} \
       -DCMAKE_SHARED_LINKER_FLAGS=${LDFLAGS} \
       -DCMAKE_INSTALL_PREFIX=/usr/local \
       ..
RUN cd /usr/src/build \
    && make -j"$(nproc)" \
    && make install
RUN ldconfig /
# Copy libgetdns, libgetdns_ext_ev, libgetdns_ext_uv
RUN cp -r /usr/local/lib/* /tmp/root/usr/local/lib/ \
    && cp -r /usr/local/include/* /tmp/root/usr/local/include/ \
    && rm -rf /tmp/root/var/run /tmp/root/usr/local/share/man/*


# Intermediate container with runtime dependencies
FROM arm64v8/alpine:latest AS runtime

# Install runtime dependencies
ENV RUN_PKGS "tzdata yaml libuv libev libevent unbound-libs openssl gnutls tini libidn2 "
RUN apk add --update --no-cache ${RUN_PKGS} \
    && rm -rf /var/cache/apk/* /usr/local/share/*


# build stubby
FROM getdns-build AS build

ARG VERSION="0.2.6"
ARG BUILD_BASE="build-base binutils clang llvm lld make gawk autoconf automake libtool curl "
ARG BUILD_PKGS="${BUILD_BASE} yaml openssl unbound gnutls-dev git "
ARG CFLAGS="-O2 -pthread -pipe -fPIC -fPIE -fomit-frame-pointer -D_FORTIFY_SOURCE=2 "
ARG CXXFLAGS="${CFLAGS}"
ARG LDFLAGS="-Wl,-O2 -Wl,--as-needed -Wl,-z,relro -Wl,-z,now "
ENV CC="clang"
ENV CXX="clang++"
ENV AR="llvm-ar"
ENV NM="llvm-nm"
ENV RANLIB="llvm-ranlib"
ENV LD="ld.lld"
ENV STRIP="llvm-strip"

RUN --mount=type=cache,target=/var/cache/apk \
    apk add --update ${BUILD_PKGS}
# build stubby
RUN mkdir -p /tmp/root/etc/unbound
RUN cd /usr/src/stubby \
    && cmake . \
       -DGETDNS_LIBRARIES=/tmp/root/usr/local/lib/ \
       -DGETDNS_INCLUDE_DIR=/tmp/root/usr/local/include \
RUN cd /usr/src/stubby \
    && make -j "$(nproc)" \
    && make install DESTDIR=/tmp/root
RUN strip /tmp/root/usr/local/bin/stubby \
    && unbound-anchor -v -a "/tmp/root/etc/unbound/getdns-root.key" || true
# copy example conf
RUN cp /usr/src/stubby/stubby.yml.example /tmp/root/etc/stubby/stubby.yml \
    && rm -rf /usr/local/share /usr/local/include


# Final container
FROM runtime
LABEL maintainer="kometchtech <kometch@gmail.com>" \
      arch="Aarch64" \
      url="https://dnsprivacy.org/wiki/display/DP/DNS+Privacy+Daemon+-+Stubby" \
      description="Stubby is the name given to a mode of using getdns which enables \
                   it to act as a local DNS Privacy stub resolver (using DNS-over-TLS)."

# Environment
ENV TZ Asia/Tokyo

# Publish port DNS over UDP
EXPOSE 53/UDP 53/TCP

# service running
STOPSIGNAL SIGTERM

# select ENTRYPOINT
WORKDIR /etc/stubby
COPY ["entrypoint.sh", "/usr/bin/"]
ENTRYPOINT ["/sbin/tini", "--", "/usr/bin/entrypoint.sh"]
CMD ["/usr/local/bin/stubby", "-C", "/etc/stubby/stubby.yml"]

COPY --from=build /tmp/root/ /
RUN ldconfig /

